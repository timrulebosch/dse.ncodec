# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Pdu

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class IpMessageMetadata(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IpMessageMetadata()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIpMessageMetadata(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def IpMessageMetadataBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x50\x44\x55", size_prefixed=size_prefixed)

    # IpMessageMetadata
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Ethernet: Destination MAC (stored in lower 48-bits, transmission order).
    #  example: uint64 := XX-XX-01-23-45-67-89-AB
    # IpMessageMetadata
    def EthDstMac(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Ethernet: Source MAC (stored in lower 48-bits, transmission order).
    #  example: uint64 := XX-XX-01-23-45-67-89-AB
    # IpMessageMetadata
    def EthSrcMac(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Ethernet: EtherType.
    # IpMessageMetadata
    def EthEthertype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Ethernet: TCI: Priority code point.
    # IpMessageMetadata
    def EthTciPcp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Ethernet: TCI: Drop eligible indicator.
    # IpMessageMetadata
    def EthTciDei(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Ethernet: TCI: VLAN identifier.
    # IpMessageMetadata
    def EthTciVid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # IpMessageMetadata
    def IpAddrType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # IP: Address.
    # IpMessageMetadata
    def IpAddr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # IP: Protocol Specifier.
    # IpMessageMetadata
    def IpProtocol(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # IP: TCP/UDP Source Port.
    # IpMessageMetadata
    def IpSrcPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # IP: TCP/UDP Destination Port.
    # IpMessageMetadata
    def IpDstPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # IpMessageMetadata
    def AdapterType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # IpMessageMetadata
    def Adapter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def Start(builder): builder.StartObject(13)
def IpMessageMetadataStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddEthDstMac(builder, ethDstMac): builder.PrependUint64Slot(0, ethDstMac, 0)
def IpMessageMetadataAddEthDstMac(builder, ethDstMac):
    """This method is deprecated. Please switch to AddEthDstMac."""
    return AddEthDstMac(builder, ethDstMac)
def AddEthSrcMac(builder, ethSrcMac): builder.PrependUint64Slot(1, ethSrcMac, 0)
def IpMessageMetadataAddEthSrcMac(builder, ethSrcMac):
    """This method is deprecated. Please switch to AddEthSrcMac."""
    return AddEthSrcMac(builder, ethSrcMac)
def AddEthEthertype(builder, ethEthertype): builder.PrependUint16Slot(2, ethEthertype, 0)
def IpMessageMetadataAddEthEthertype(builder, ethEthertype):
    """This method is deprecated. Please switch to AddEthEthertype."""
    return AddEthEthertype(builder, ethEthertype)
def AddEthTciPcp(builder, ethTciPcp): builder.PrependUint8Slot(3, ethTciPcp, 0)
def IpMessageMetadataAddEthTciPcp(builder, ethTciPcp):
    """This method is deprecated. Please switch to AddEthTciPcp."""
    return AddEthTciPcp(builder, ethTciPcp)
def AddEthTciDei(builder, ethTciDei): builder.PrependUint8Slot(4, ethTciDei, 0)
def IpMessageMetadataAddEthTciDei(builder, ethTciDei):
    """This method is deprecated. Please switch to AddEthTciDei."""
    return AddEthTciDei(builder, ethTciDei)
def AddEthTciVid(builder, ethTciVid): builder.PrependUint16Slot(5, ethTciVid, 0)
def IpMessageMetadataAddEthTciVid(builder, ethTciVid):
    """This method is deprecated. Please switch to AddEthTciVid."""
    return AddEthTciVid(builder, ethTciVid)
def AddIpAddrType(builder, ipAddrType): builder.PrependUint8Slot(6, ipAddrType, 0)
def IpMessageMetadataAddIpAddrType(builder, ipAddrType):
    """This method is deprecated. Please switch to AddIpAddrType."""
    return AddIpAddrType(builder, ipAddrType)
def AddIpAddr(builder, ipAddr): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(ipAddr), 0)
def IpMessageMetadataAddIpAddr(builder, ipAddr):
    """This method is deprecated. Please switch to AddIpAddr."""
    return AddIpAddr(builder, ipAddr)
def AddIpProtocol(builder, ipProtocol): builder.PrependUint8Slot(8, ipProtocol, 0)
def IpMessageMetadataAddIpProtocol(builder, ipProtocol):
    """This method is deprecated. Please switch to AddIpProtocol."""
    return AddIpProtocol(builder, ipProtocol)
def AddIpSrcPort(builder, ipSrcPort): builder.PrependUint16Slot(9, ipSrcPort, 0)
def IpMessageMetadataAddIpSrcPort(builder, ipSrcPort):
    """This method is deprecated. Please switch to AddIpSrcPort."""
    return AddIpSrcPort(builder, ipSrcPort)
def AddIpDstPort(builder, ipDstPort): builder.PrependUint16Slot(10, ipDstPort, 0)
def IpMessageMetadataAddIpDstPort(builder, ipDstPort):
    """This method is deprecated. Please switch to AddIpDstPort."""
    return AddIpDstPort(builder, ipDstPort)
def AddAdapterType(builder, adapterType): builder.PrependUint8Slot(11, adapterType, 0)
def IpMessageMetadataAddAdapterType(builder, adapterType):
    """This method is deprecated. Please switch to AddAdapterType."""
    return AddAdapterType(builder, adapterType)
def AddAdapter(builder, adapter): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(adapter), 0)
def IpMessageMetadataAddAdapter(builder, adapter):
    """This method is deprecated. Please switch to AddAdapter."""
    return AddAdapter(builder, adapter)
def End(builder): return builder.EndObject()
def IpMessageMetadataEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)