# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Frame

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Timing(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Timing()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTiming(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def TimingBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x46\x52\x41", size_prefixed=size_prefixed)

    # Timing
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Timing
    def Send(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Timing
    def Arbitration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Timing
    def Recv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(3)
def TimingStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddSend(builder, send): builder.PrependInt64Slot(0, send, 0)
def TimingAddSend(builder, send):
    """This method is deprecated. Please switch to AddSend."""
    return AddSend(builder, send)
def AddArbitration(builder, arbitration): builder.PrependInt64Slot(1, arbitration, 0)
def TimingAddArbitration(builder, arbitration):
    """This method is deprecated. Please switch to AddArbitration."""
    return AddArbitration(builder, arbitration)
def AddRecv(builder, recv): builder.PrependInt64Slot(2, recv, 0)
def TimingAddRecv(builder, recv):
    """This method is deprecated. Please switch to AddRecv."""
    return AddRecv(builder, recv)
def End(builder): return builder.EndObject()
def TimingEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)