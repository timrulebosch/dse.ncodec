# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Frame

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CanFrame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CanFrame()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCanFrame(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CanFrameBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x46\x52\x41", size_prefixed=size_prefixed)

    # CanFrame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CanFrame
    def FrameId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CanFrame
    def Payload(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # CanFrame
    def PayloadAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # CanFrame
    def PayloadLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CanFrame
    def PayloadIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # CanFrame
    def FrameType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # CanFrame
    def BusId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # CanFrame
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # CanFrame
    def InterfaceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # CanFrame
    def Timing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from AutomotiveBus.Stream.Frame.Timing import Timing
            obj = Timing()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Start(builder): builder.StartObject(7)
def CanFrameStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddFrameId(builder, frameId): builder.PrependUint32Slot(0, frameId, 0)
def CanFrameAddFrameId(builder, frameId):
    """This method is deprecated. Please switch to AddFrameId."""
    return AddFrameId(builder, frameId)
def AddPayload(builder, payload): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(payload), 0)
def CanFrameAddPayload(builder, payload):
    """This method is deprecated. Please switch to AddPayload."""
    return AddPayload(builder, payload)
def StartPayloadVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def CanFrameStartPayloadVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPayloadVector(builder, numElems)
def AddFrameType(builder, frameType): builder.PrependInt8Slot(2, frameType, 0)
def CanFrameAddFrameType(builder, frameType):
    """This method is deprecated. Please switch to AddFrameType."""
    return AddFrameType(builder, frameType)
def AddBusId(builder, busId): builder.PrependUint8Slot(3, busId, 0)
def CanFrameAddBusId(builder, busId):
    """This method is deprecated. Please switch to AddBusId."""
    return AddBusId(builder, busId)
def AddNodeId(builder, nodeId): builder.PrependUint8Slot(4, nodeId, 0)
def CanFrameAddNodeId(builder, nodeId):
    """This method is deprecated. Please switch to AddNodeId."""
    return AddNodeId(builder, nodeId)
def AddInterfaceId(builder, interfaceId): builder.PrependUint8Slot(5, interfaceId, 0)
def CanFrameAddInterfaceId(builder, interfaceId):
    """This method is deprecated. Please switch to AddInterfaceId."""
    return AddInterfaceId(builder, interfaceId)
def AddTiming(builder, timing): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(timing), 0)
def CanFrameAddTiming(builder, timing):
    """This method is deprecated. Please switch to AddTiming."""
    return AddTiming(builder, timing)
def End(builder): return builder.EndObject()
def CanFrameEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)