# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Pdu

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CanMessageMetadata(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CanMessageMetadata()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCanMessageMetadata(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CanMessageMetadataBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x50\x44\x55", size_prefixed=size_prefixed)

    # CanMessageMetadata
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CAN: Message Format.
    # CanMessageMetadata
    def MessageFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # CAN: Frame Type.
    # CanMessageMetadata
    def FrameType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # CAN: Interface ID of the Interface _sending_ this PDU.
    # CanMessageMetadata
    def InterfaceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CAN: Network ID of the network that _carries_ this PDU.
    # CanMessageMetadata
    def NetworkId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(4)
def CanMessageMetadataStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddMessageFormat(builder, messageFormat): builder.PrependInt8Slot(0, messageFormat, 0)
def CanMessageMetadataAddMessageFormat(builder, messageFormat):
    """This method is deprecated. Please switch to AddMessageFormat."""
    return AddMessageFormat(builder, messageFormat)
def AddFrameType(builder, frameType): builder.PrependInt8Slot(1, frameType, 0)
def CanMessageMetadataAddFrameType(builder, frameType):
    """This method is deprecated. Please switch to AddFrameType."""
    return AddFrameType(builder, frameType)
def AddInterfaceId(builder, interfaceId): builder.PrependUint32Slot(2, interfaceId, 0)
def CanMessageMetadataAddInterfaceId(builder, interfaceId):
    """This method is deprecated. Please switch to AddInterfaceId."""
    return AddInterfaceId(builder, interfaceId)
def AddNetworkId(builder, networkId): builder.PrependUint32Slot(3, networkId, 0)
def CanMessageMetadataAddNetworkId(builder, networkId):
    """This method is deprecated. Please switch to AddNetworkId."""
    return AddNetworkId(builder, networkId)
def End(builder): return builder.EndObject()
def CanMessageMetadataEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)