# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Pdu

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Stream(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Stream()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStream(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StreamBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x50\x44\x55", size_prefixed=size_prefixed)

    # Stream
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # STREAM: PDU Vector.
    # Stream
    def Pdus(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from AutomotiveBus.Stream.Pdu.Pdu import Pdu
            obj = Pdu()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Stream
    def PdusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Stream
    def PdusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Metadata: Node UID of the Simulation (or System) node which is sending
    #  this stream object. Used by a Node to detect incomming stream objects
    #  which the Node had previously sent (i.e. an echo from the underlying
    #  implementation of the stream transport).
    # Stream
    def NodeUid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(2)
def StreamStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddPdus(builder, pdus): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pdus), 0)
def StreamAddPdus(builder, pdus):
    """This method is deprecated. Please switch to AddPdus."""
    return AddPdus(builder, pdus)
def StartPdusVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StreamStartPdusVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPdusVector(builder, numElems)
def AddNodeUid(builder, nodeUid): builder.PrependUint32Slot(1, nodeUid, 0)
def StreamAddNodeUid(builder, nodeUid):
    """This method is deprecated. Please switch to AddNodeUid."""
    return AddNodeUid(builder, nodeUid)
def End(builder): return builder.EndObject()
def StreamEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)