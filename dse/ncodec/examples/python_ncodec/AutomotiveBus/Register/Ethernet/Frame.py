# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Ethernet

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Frame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Frame()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFrame(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FrameBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x52\x49\x45\x4E", size_prefixed=size_prefixed)

    # Frame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Frame
    def DestMac(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Frame
    def DestMacAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Frame
    def DestMacLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Frame
    def DestMacIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Frame
    def SrcMac(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Frame
    def SrcMacAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Frame
    def SrcMacLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Frame
    def SrcMacIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Frame
    def VlanTag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Frame
    def EtherType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Frame
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Frame
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Frame
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Frame
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Frame
    def Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(6)
def FrameStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddDestMac(builder, destMac): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(destMac), 0)
def FrameAddDestMac(builder, destMac):
    """This method is deprecated. Please switch to AddDestMac."""
    return AddDestMac(builder, destMac)
def StartDestMacVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def FrameStartDestMacVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartDestMacVector(builder, numElems)
def AddSrcMac(builder, srcMac): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(srcMac), 0)
def FrameAddSrcMac(builder, srcMac):
    """This method is deprecated. Please switch to AddSrcMac."""
    return AddSrcMac(builder, srcMac)
def StartSrcMacVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def FrameStartSrcMacVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSrcMacVector(builder, numElems)
def AddVlanTag(builder, vlanTag): builder.PrependUint64Slot(2, vlanTag, 0)
def FrameAddVlanTag(builder, vlanTag):
    """This method is deprecated. Please switch to AddVlanTag."""
    return AddVlanTag(builder, vlanTag)
def AddEtherType(builder, etherType): builder.PrependUint16Slot(3, etherType, 0)
def FrameAddEtherType(builder, etherType):
    """This method is deprecated. Please switch to AddEtherType."""
    return AddEtherType(builder, etherType)
def AddData(builder, data): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def FrameAddData(builder, data):
    """This method is deprecated. Please switch to AddData."""
    return AddData(builder, data)
def StartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def FrameStartDataVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartDataVector(builder, numElems)
def AddLength(builder, length): builder.PrependUint16Slot(5, length, 0)
def FrameAddLength(builder, length):
    """This method is deprecated. Please switch to AddLength."""
    return AddLength(builder, length)
def End(builder): return builder.EndObject()
def FrameEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)